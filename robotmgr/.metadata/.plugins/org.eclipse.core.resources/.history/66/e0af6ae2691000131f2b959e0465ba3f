#include <stdio.h>
#include <stdlib.h>

#include "dandy_platform.h"
#include "dandy_echo.h"
#include "dandy_msgpass.h"
#include "dandy_thread.h"
#include "dandy_shmem.h"
#include "dandy_timecon.h"
#include "dandy_debug.h"

#include "ipc_servocon.h"
#include "ipc_robotmgr.h"
#include "ipc_taskexec.h"
#include "CRT.h"
#include "servocon.h"
#if defined (__QNXNTO__)
#include "ecattypes.h"
#endif




////////////////////////////////////////////////////////////////////////////////
//
// global variable
//
int g_hShm_sc = DANDY_INVALID_SHMEM_HANDLE;
int g_hShm_rm = DANDY_INVALID_SHMEM_HANDLE;
int g_hShm_te = DANDY_INVALID_SHMEM_HANDLE;

// shared memory
volatile SHM_SC_SYSTEM*       g_pShmem_sc = NULL;
volatile SHM_RM_SYSSTATUS*    g_pShmem_rm = NULL; 
volatile SHM_TE_STATUS*       g_pShmem_te = NULL;

// thread
THREAD_HANDLE thread_RcvTimerPulse;   // thread to receive timer pulse
THREAD_HANDLE thread_CheckTime;       // thread of receive time checking from RM
THREAD_HANDLE thread_SlaveState;      // thread to check slave state
THREAD_HANDLE thread_VGADisplay;      // thread to VGA Display

BOOL g_fThreadRuntime  = FALSE;  // flag of RcvTimerPulse thread exit
BOOL g_fDeviceStateThreadState = FALSE;  // flag of SlaveState thread exit
BOOL g_fDisplayThreadState     = FALSE;  // flag of Display thread exit

BOOL g_fExit           = FALSE;  // flag of SC process exit
BOOL g_fInit_Internal  = FALSE;  // flag of SC(internal) initialization
BOOL g_fInit_External  = FALSE;  // flag of SC(external) initialization
BOOL g_fOpenShmRm      = FALSE;  // flag of open RM_SHM
BOOL g_fOpenShmSc      = FALSE;  // flag of open SC_SHM
BOOL g_fOpenShmTe      = FALSE;  // flag of open TE_SHM
BOOL g_fLoopGo         = TRUE;   // flag of while loop
BOOL g_fEcat           = FALSE;  // flag of EtherCAT Master state
BOOL g_fConfigLoad     = FALSE;  // config file load state
                               
int g_coidRM = -1;             // connection identifier(to RM)
int g_coidTE = -1;             // connection identifier(to TE)
int g_chidSC = -1;             // service channel identifier
int g_chidSCTime = -1;         // timer channel identifier
int g_rcvidSC = -1;            // receive identifier
int g_rcvidDevice = -1;        // receive identifier of deviece execution
int g_nTimer = -1;             // timer number
int g_nTime_Limit = 0;         // time limit for SC init.
char g_chPrintLev = 'v';       // print level ('v', 'm', 'w', 'e')

// set variable for PDO write
unsigned short g_CtrlWord[AXIS_COUNT];   // control word for PDO write
int g_nTrg_Pos[AXIS_COUNT];              // target position of motor for PDO write

// get variable for PDO read
unsigned short g_StatusWord[AXIS_COUNT]; // status word for PDO read
int g_nAct_Pos[AXIS_COUNT];              // actual position of motor for PDO read
int g_nErrCode[AXIS_COUNT];              // error code of servo-pack for PDO read

// get variable for servo state
int g_nError[AXIS_COUNT];                // default of servo-pack
int g_nServo[AXIS_COUNT];                // state of servo on/off 

ECAT_HANDLE g_hMaster = ECAT_NULL; // EtherCAT master handle


////////////////////////////////////////////////////////////////////////////////
//
// function
//
int SC_Init_Internal(void);                        // SC internal Init. 
int SC_Init_External(void);                        // SC external Init.
int SC_Exit(void);                                 // end of SC process
int _loc_ExitConsole(void);                        // console handler
int DoService(const SC_MSG* pRcv, SC_MSG* pSend);  // service function

static int RM_OpenShmem(void);                     // open RM_SHM
static int RM_DestroyShmem(void);                  // destroy RM_SHM
static int TE_OpenShmem(void);                     // open TE_SHM 
static int TE_DestroyShmem(void);                  // destroy TE_SHM
static int SC_CreateShmem(void);                   // create SC_SHM
static void SC_DestroyShmem(void);                 // destroy SC_SHM




////////////////////////////////////////////////////////////////////////////////
//
// _loc_ReceiveTimerPulse()
//
THREAD_ENTRY_TYPE _loc_ReceiveTimerPulse(void* pParam)
{
    SC_MSG rcv_packet;
    SC_MSG send_packet;
    int rcvidFromTE;
    int nRet = -1;
    int i;

    // receive timer pulse from TE
    while(g_fExit == FALSE)
    {
        rcvidFromTE = MSG_Receive(g_chidSCTime,
                                  &rcv_packet,
                                  sizeof(rcv_packet),
                                  NULL);

        memcpy(&send_packet, &rcv_packet, sizeof(SC_MSG));
                
        if (g_pShmem_sc->fEcatInit == TRUE && g_pShmem_sc->fServo == TRUE)
        {
        	// write target position to servo
        	for(i = 0; i < AXIS_COUNT; i++)
        	{
        		g_nTrg_Pos[i] = g_pShmem_sc->nTrgPos[i];
        		g_CtrlWord[i] = 0x0f;

                nRet = ECAT_WritePDO(i);
        	}        	

            
            // read actual position from servo
        	for (i = 0; i < AXIS_COUNT; i++)
        	{
        		nRet = ECAT_ReadPosition(i, &g_nAct_Pos[i]);

                if (nRet == 0)
                {
                    // write actual position to SHM_SC
                    g_pShmem_sc->nActPos[i] = g_nAct_Pos[i];
                    
                    send_packet.data.pos.nActPos[i] = g_nAct_Pos[i];
                }
        	}
        }

        // reply message
        if (rcvidFromTE == 0)  // pulse
        {
        	send_packet.size = 0;
        }
        else  // message
        {
        	MSG_Reply(rcvidFromTE, 0, &send_packet, sizeof(send_packet));
        }

        THREAD_Sleep(0);

    } // end while

    g_fThreadRuntime = TRUE;

    return 0;
}



////////////////////////////////////////////////////////////////////////////////
//
// _loc_MsgRecvTimeLimit()
//
THREAD_ENTRY_TYPE _loc_MsgRecvTimeLimit(void* pParam)
{
    int iCnt = 0;
    int coid = -1;
    
    // check state of external initialization
    while(iCnt < g_nTime_Limit)
    {
        iCnt++;
        THREAD_Sleep(1000);

        if (g_rcvidSC == -1)
        {
            ;            
        }
        else
        {
            break;
        }

        if (iCnt == g_nTime_Limit)
        {
            VERBOSE_WARNING("Elapsed time of receive message : %d [sec]\n", 
                            g_nTime_Limit);

            VERBOSE_ERROR("Disconnected RM process.\n");

            // connect SC channel
            coid = SC_ConnectChannel(SC_CHANNEL_NAME);
            
            if (coid != -1)
            {
                // send exit cmd
                MSG_SendPulse(coid, SC_SERV_EXIT, 0);
            }
            
            THREAD_Sleep(100);
            
            SC_DetachConnection(SC_CHANNEL_NAME, coid);
            break;
        }
    }

    return 0;
}



////////////////////////////////////////////////////////////////////////////////
//
// _loc_GetDeviceState()
//
THREAD_ENTRY_TYPE _loc_GetDeviceState(void* pParam)
{
	int nRet;

	while (g_fExit == FALSE)
	{
        // (1) network (EtherCAT)
        nRet = SC_GetNetworkState();
        //VERBOSE_MESSAGE("network : %d\n", nRet);


        if (nRet == 0)
        {
            if (g_pShmem_sc != NULL)
            {
                g_pShmem_sc->fEcatInit = TRUE;
            }
        }
        else
        {
            if (g_pShmem_sc != NULL)
            {
                g_pShmem_sc->fEcatInit = FALSE;                
            }
        }

        // (2) error & servo
        if (g_pShmem_sc->fEcatInit == TRUE)
        {            
        	nRet = SC_GetServoState();
        }

        // (3) E-STOP
        
        THREAD_Sleep(500);  // period of monitoring
	}

    g_fDeviceStateThreadState = TRUE;

	return 0;
}


/////////////////////////////////////////////////////////////////////////////
//
//  Thread Routine: _loc_DSP_VGADisplyThread()
//
#define FirstLine     11
#define SecondLine    12
#define POS_DATA_LEN  9

THREAD_ENTRY_TYPE _loc_DSP_VGADisplyThread(void* pParam)
{
    static int s_nDSPPosX;
    static int s_nCnt;


    while(g_fExit == FALSE)
	{
        s_nDSPPosX = 0;
        VGA_printf(s_nDSPPosX, FirstLine,"OrgPulse:");
        s_nDSPPosX = 12;

        for(s_nCnt = 0; s_nCnt < AXIS_COUNT; s_nCnt++)
        {
            VGA_printf(s_nDSPPosX, FirstLine,
                       "%9d", g_nAct_Pos[s_nCnt]);

            s_nDSPPosX = s_nDSPPosX + POS_DATA_LEN;

            if(s_nCnt == AXIS_COUNT - 1)
                s_nDSPPosX = 10;
        }

        DANDY_SLEEP(20);
    }

    g_fDisplayThreadState = TRUE;

    return 0;
}


////////////////////////////////////////////////////////////////////////////////
//
// main()
//
int main(int nArgc, char* rgpszArgv[])
{
    const char* VERBOSE_NAME = "Servo_Program";
    const char* VERBOSE_PREFIX = "[SC] ";

    int nRet = -1;             // return value of function

    SC_MSG packet_msg;         // send packet
    SC_MSG packet_reply;       // reply packet
    MSG_INFO info;


    ////////////////////////////////////////////////////////////////////////////
    // set console handler
    //
    DEBUG_SetConsoleHandler((DEBUG_CONSOLE_HANDLER) _loc_ExitConsole);


    ////////////////////////////////////////////////////////////////////////////
    // parse program option
    //
    if (ParseArgument(nArgc, rgpszArgv) == FALSE)
    {
        //VERBOSE_ERROR("Argument Parcing Fail!\n");
        return EXIT_SUCCESS;
    }

    ////////////////////////////////////////////////////////////////////////////
    // set display
    //
    // verbose create
    VERBOSE_Create(VERBOSE_NAME, VERBOSE_PREFIX);

    SC_SetVerbose();  // set type of verbose

    // init VGA
    if(VGA_MapVGAMemory(0) == -1)
    {
        VERBOSE_ERROR("Map Error\n");
        return -1;
    }

    // config default VGA display color
    VGA_SetAttr(VGA_MAKE_ATTR(VGA_COLOR_WHITE, VGA_COLOR_BLACK));

    ////////////////////////////////////////////////////////////////////////////
    // SC internal initialization
    //
    SC_Init_Internal();    

    if (g_nTime_Limit > 0)
    {
        // create thread that elapsed time of receive msg from RM
        thread_CheckTime = THREAD_Create(_loc_MsgRecvTimeLimit, // function
                                         NULL,                  // variable
                                         0,                     // stack size
                                         0,                     // priority
                                         THREAD_DETACHED,       // option
                                         THREAD_POLICY_RR);     // policy
    }

    // create thread that monitoring of servo
    thread_SlaveState = THREAD_Create(_loc_GetDeviceState,
                                      NULL,
                                      0,
                                      0,
                                      THREAD_DETACHED,
                                      THREAD_POLICY_RR);

    // create thread that display state(for vga)
    thread_VGADisplay = THREAD_Create(_loc_DSP_VGADisplyThread,
                                      NULL,
                                      0,
                                      0,
                                      THREAD_DETACHED,
                                      THREAD_POLICY_RR);
            

    ////////////////////////////////////////////////////////////////////////////
    // message receive & reply 
    //
    do
    {
        // receive message
        g_rcvidSC = MSG_Receive(g_chidSC, &packet_msg, sizeof(packet_msg), &info);

        if (packet_msg.code == SC_SERV_ALIVE)
        {
            ;
        }
        else
        {
            VERBOSE_VERBOSE("Received service code: <%d>, value: <%d>\n",
            		        packet_msg.code,
            		        packet_msg.value);
        }

        
        // set reply data(packet)
        nRet = DoService(&packet_msg, &packet_reply);

        // message reply
        if (g_rcvidSC == RCVID_PULSE)   // pulse
        {
            packet_reply.size = 0;
        }
        else if (g_rcvidSC > 0)         // message
        {
            MSG_Reply(g_rcvidSC, nRet, &packet_reply, sizeof(packet_reply));
        }
        else
        {
            VERBOSE_ERROR("Failed to receive data...\n");
        }

    }while(g_fLoopGo);

    
    ////////////////////////////////////////////////////////////////////////////
    // detach RM connection
    //
    if (g_coidRM != -1)
    {
        SC_DetachConnection(SHM_RM_SYSSTATUS_NAME, g_coidRM);
        g_coidRM = -1;
    }

    ////////////////////////////////////////////////////////////////////////////
    // destroy SC-Channel
    //
    if (g_chidSC != -1)
    {
        SC_DestroyChannel(SC_CHANNEL_NAME, g_chidSC);
        g_chidSC = -1;
    }

    VERBOSE_MESSAGE("SC process shut down...\n");
    THREAD_Sleep(1000);  // wait for message complete

    ////////////////////////////////////////////////////////////////////////////
    // destroy display service
    // 
    VGA_UnmapVGAMemory();
    VERBOSE_WaitForComplete();
    VERBOSE_Destroy();

    return EXIT_SUCCESS;

}  // end main()


//////////////////////////////////////////////////////////////////////////
//
// SC_Init_Internal()
//
int SC_Init_Internal(void)  
{
    int nRet;

    if (g_fInit_Internal == TRUE)
    {
        VERBOSE_WARNING("SC already initialized.!!!\n");
        return 0;
    }

    // (1) create SC SHM(shared memory)
    if (g_fOpenShmSc == FALSE)
    {
        SC_CreateShmem();
    }

    // (2) create SC-channel
    if (g_chidSC == -1)
    {
        g_chidSC = SC_CreateChannel(SC_CHANNEL_NAME);
    }

    // (3) create SC-RunTime-channel
    if (g_chidSCTime == -1)
    {
        g_chidSCTime = SC_CreateChannel(SC_TIME_CHANNEL);
    }

    // (4) EtherCAT Master Init.
    nRet = ECAT_Init();
    if (nRet == 0)
    {
        if (g_pShmem_sc != NULL)
        {
            g_pShmem_sc->fEcatInit = TRUE;  // write to SC_SHM            
        }        
    }
    else
    {
        if (g_pShmem_sc != NULL)
        {
            g_pShmem_sc->fEcatInit = FALSE;  // write to SC_SHM
        }
    }

    // (5) create run-time thread (TE & SC)
    thread_RcvTimerPulse = THREAD_Create(_loc_ReceiveTimerPulse, // function
                                         NULL,                   // variable
                                         0,                      // stack size
                                         THREAD_PRIO_REALTIME,   // priority
                                         THREAD_DETACHED,        // option
                                         THREAD_POLICY_FIFO);    // policy


    if ((g_pShmem_sc->fEcatInit == FALSE) || (g_fOpenShmSc == FALSE) 
        || (g_chidSC == -1)	|| (g_chidSCTime == -1) 
        || thread_RcvTimerPulse == NULL)
    {
        VERBOSE_ERROR("Failed to initialize the SC(internal) process.\n");
        return -1;
    }
    else
    {

		// read actual position
    	//ECAT_ReadActPos();
        SC_GetPosition();

        g_fInit_Internal = TRUE;
        VERBOSE_MESSAGE("Completed to initialize the SC(internal) process.\n");

        return 0;
    }
    
}


//////////////////////////////////////////////////////////////////////////
//
// SC_Init_External()
//
int SC_Init_External(void)  // coidRM, coidTE, coidSC, nTimer
{
    int nRet_rm = 0;
    int nRet_te = 0;
    int nRet_ecat = 0;

#if 0
    if (g_fInit_External == TRUE)
    {
        VERBOSE_WARNING("SC already initialized.!!!\n");
        return 0;
    }
#endif



    // (1) connect RM channel
    if (g_coidRM == -1)
    {
        g_coidRM = SC_ConnectChannel(SYS_RM_CHANNEL_NAME);
    }

    // (2) open RM_SHM
    if (g_fOpenShmRm == FALSE)
    {
        nRet_rm = RM_OpenShmem();
    }

#if 1
    // (3) open TE_SHM
    if (g_fOpenShmTe == FALSE)
    {
        nRet_te = TE_OpenShmem();
    }
#endif

    // (4) Ecat init.
    if (g_pShmem_sc->fEcatInit == FALSE)
    {
        nRet_ecat = ECAT_Init();

        if (nRet_ecat != 0)
        {
            if (g_pShmem_sc != NULL)
            {
            	g_pShmem_sc->fEcatInit = FALSE;  // write 'EcatInit' flag to SC_SHM
            }

        	VERBOSE_ERROR("Failed to initialize EhterCAT Master.\n");
        }
        else
        {
            if (g_pShmem_sc != NULL)
        	{
        		g_pShmem_sc->fEcatInit = TRUE;  // write 'EcatInit' flag to SC_SHM
        	}
        }        
        
    }

    // read actual position
    if (g_pShmem_sc->fEcatInit == TRUE)
    {	    
        SC_GetPosition();
    }

    if ((g_coidRM == -1) || (nRet_rm == -1) || (nRet_te == -1))
    {
        g_fInit_External = FALSE;

        if (g_pShmem_rm != NULL)
        {            
            g_pShmem_rm->fExitProcSC = FALSE;  // write 'Exit' flag to RM_SHM
        	g_pShmem_rm->fInitProcSC = FALSE;  // write 'Init' flag to RM_SHM
        }

        return -1;
    }
    else
    {
        g_fInit_External = TRUE;

        g_pShmem_rm->fExitProcSC = FALSE; // write 'Exit' flag to RM_SHM
        g_pShmem_rm->fInitProcSC = TRUE;  // write 'Init' flag to RM_SHM

        VERBOSE_MESSAGE("Completed to initialize the SC(external) process.\n");
        VERBOSE_MESSAGE("Service ready for SC process.\n");

        return 0;
    }

}


//////////////////////////////////////////////////////////////////////////
//
// SC_CreateShmem()
//
static int SC_CreateShmem(void)
{
    // create SC_SHM
    if (g_pShmem_sc != NULL)
    {
        VERBOSE_WARNING("SC shared memory already created.\n");
        return 0;
    }

    g_hShm_sc = SHM_Create(SC_SHM_NAME, sizeof(SHM_SC_SYSTEM));
    
    if (g_hShm_sc == DANDY_INVALID_SHMEM_HANDLE)
    {  
    	g_fOpenShmSc = FALSE;   // flag of SC_SHM creation
        VERBOSE_ERROR("Cannot create the SC shared memory.\n");
        return -1;
    }

    // map the shared memory handle
    //g_pShmem_sc = (volatile SHM_SC_SYSTEM*) SHM_Map(g_hShm_sc, sizeof(SHM_SC_SYSTEM));
    g_pShmem_sc = (SHM_SC_SYSTEM*) SHM_Map(g_hShm_sc, sizeof(SHM_SC_SYSTEM));

    if (g_pShmem_sc == NULL)
    {
        g_fOpenShmSc = FALSE;   // flag of SC_SHM creation
        VERBOSE_ERROR("Cannot create the SC shared memory.\n");
        return -1;
    }

    memset((void*) g_pShmem_sc, 0, sizeof(SHM_SC_SYSTEM));  // memory init.
    g_pShmem_sc->nsize = sizeof(SHM_SC_SYSTEM);  // memory size

    g_fOpenShmSc = TRUE;   // flag of SC_SHM creation

    VERBOSE_VERBOSE("Created SC shared memory : size<%d bytes>\n", 
                    g_pShmem_sc->nsize);

    return 0;
}



////////////////////////////////////////////////////////////////////////////////
//
// RM_OpenShmem()
//
static int RM_OpenShmem(void)
{
    // RM shared memory open
    if (g_pShmem_rm != NULL)
    {
        VERBOSE_WARNING("RM shared memory already opened.\n");
        return 0;
    }

    g_hShm_rm = SHM_Open(SHM_RM_SYSSTATUS_NAME);

    if (g_hShm_rm == -1)
    {
        VERBOSE_ERROR("Failed to open RM shared memory.!!!\n");
        return -1;
    }
    else
    {
        VERBOSE_VERBOSE("Opened the RM shared memory. Name(%s)\n", 
                        SHM_RM_SYSSTATUS_NAME);
    }

    // map
    g_pShmem_rm = (SHM_RM_SYSSTATUS*) SHM_Map(g_hShm_rm, 
                                              sizeof(SHM_RM_SYSSTATUS));

    if (g_pShmem_rm == NULL)
    {
        VERBOSE_ERROR("Cannot map the RM shared memory.!!!\n");
        return -1;
    }
    else
    {
        if (sizeof(SHM_RM_SYSSTATUS) == g_pShmem_rm->nSize)
        {
            g_fOpenShmRm = TRUE;  // flag of open RM_SHM
            
            //g_pShmem_rm->fInitProcSC = TRUE;  // write 'Init' flag to RM_SHM

            VERBOSE_VERBOSE("Mapped the RM shared memory. Size(%dbytes), "
                            "Chk(%dbytes)\n", 
                            sizeof(SHM_RM_SYSSTATUS),
                            g_pShmem_rm->nSize);
        }
        else
        {
            g_fOpenShmRm = FALSE;  // flag of open RM_SHM
            VERBOSE_ERROR("Mismatched the RM shared memory. Size(%dbytes), "
                          "Chk(%dbytes)\n",
                          sizeof(SHM_RM_SYSSTATUS),
                          g_pShmem_rm->nSize);

            return -1;
        }
    }

    return 0;
}


////////////////////////////////////////////////////////////////////////////////
//
// TE_OpenShmem()
//
static int TE_OpenShmem(void)
{
    // TE shared memory open
    if (g_pShmem_te != NULL)
    {
        VERBOSE_WARNING("TE shared memory already opened.\n");
        return 0;
    }

    g_hShm_te = SHM_Open(SHMNAME_TE_TEST);

    if (g_hShm_te == -1)
    {
        VERBOSE_ERROR("Failed to open TE shared memory.!!!\n");
        return -1;
    }
    else
    {
        VERBOSE_VERBOSE("Opened the TE shared memory. Name(%s)\n", 
                        SHMNAME_TE_TEST);
    }

    // map
    g_pShmem_te = (SHM_TE_STATUS*) SHM_Map(g_hShm_te, sizeof(SHM_TE_STATUS));

    if (g_pShmem_te == NULL)
    {
        VERBOSE_ERROR("Cannot map the TE shared memory.!!!\n");
        return -1;
    }
    else
    {
        if (sizeof(SHM_TE_STATUS) == g_pShmem_te->size)
        {
            g_fOpenShmTe = TRUE;  // flag of open TE_SHM
            
            //g_pShmem_rm->fInitProcSC = TRUE;  // write 'Init' flag to RM_SHM

            VERBOSE_VERBOSE("Mapped the TE shared memory. Size(%dbytes), "
                            "Chk(%dbytes)\n", 
                            sizeof(SHM_TE_STATUS),
                            g_pShmem_te->size);
        }
        else
        {
            g_fOpenShmTe = FALSE;  // flag of open TE_SHM
            VERBOSE_ERROR("Mismatched the TE shared memory. Size(%dbytes), "
                          "Chk(%dbytes)\n",
                          sizeof(SHM_TE_STATUS),
                          g_pShmem_te->size);

            return -1;
        }
    }    

    return 0;
}



////////////////////////////////////////////////////////////////////////////////
//
// RM_DestroyShmem()
//
static int RM_DestroyShmem(void)
{
    // unmap RM shared memory
    if (g_pShmem_rm != NULL)
    {
        SHM_Unmap((void*) g_pShmem_rm, sizeof(SHM_RM_SYSSTATUS));
        g_pShmem_rm = NULL;

        VERBOSE_VERBOSE("Unmapped the RM shared memory. Size(%dbytes)\n", 
                        sizeof(SHM_RM_SYSSTATUS));
    }

    // close RM shared memory
    if (g_hShm_rm != DANDY_INVALID_SHMEM_HANDLE)
    {
        SHM_Close(g_hShm_rm);
        //SHM_Destroy(g_hShm_rm, RMGR_SYSSTATUS_RM_SHM_NAME);
        g_hShm_rm = DANDY_INVALID_SHMEM_HANDLE;
        g_fOpenShmRm = FALSE;  // flag of open RM_SHM

        VERBOSE_VERBOSE("Destroyed the RM shared memory. Name(%s)\n", 
                        SHM_RM_SYSSTATUS_NAME);
    }
    
    return 0;
}


////////////////////////////////////////////////////////////////////////////////
//
// TE_DestroyShmem()
//
static int TE_DestroyShmem(void)
{
    // unmap TE shared memory
    if (g_pShmem_te != NULL)
    {
        SHM_Unmap((void*) g_pShmem_te, sizeof(SHM_TE_STATUS));
        g_pShmem_te = NULL;

        VERBOSE_VERBOSE("Unmapped the TE shared memory. Size(%dbytes)\n", 
                        sizeof(SHM_TE_STATUS));
    }

    // close TE shared memory
    if (g_hShm_te != DANDY_INVALID_SHMEM_HANDLE)
    {
        SHM_Close(g_hShm_te);
        //SHM_Destroy(g_hShm_rm, RMGR_SYSSTATUS_RM_SHM_NAME);
        g_hShm_te = DANDY_INVALID_SHMEM_HANDLE;
        g_fOpenShmTe = FALSE;  // flag of open TE_SHM

        VERBOSE_VERBOSE("Destroyed the TE shared memory. Name(%s)\n", 
                        SHMNAME_TE_TEST);
    }
    
    return 0;
}


////////////////////////////////////////////////////////////////////////////////
//
// SC_DestroyShmem()
//
static void SC_DestroyShmem(void)
{
    if (g_pShmem_sc != NULL)
    {
        SHM_Unmap((void*) g_pShmem_sc, sizeof(SHM_SC_SYSTEM));
        g_pShmem_sc = NULL;

        VERBOSE_VERBOSE("Unmapped the SC shared memory. Size(%dbytes)\n", 
                        sizeof(SHM_SC_SYSTEM));
    }

    if (g_hShm_sc != -1)
    {
        SHM_Destroy(g_hShm_sc, SC_SHM_NAME);
        g_hShm_sc = -1;

        VERBOSE_VERBOSE("Destroyed the SC shared memory. Name(%s)\n", 
                        SC_SHM_NAME);
    }

    g_fOpenShmSc = FALSE;   // flag of SC_SHM creation
    
}


////////////////////////////////////////////////////////////////////////////////
//
// SC_Exit()
//
int SC_Exit(void)  // coidSC, chidSCTime, chidSC
{
    int i;

    g_fExit = TRUE;
    
    // (1) check servo on/off state
    if (g_pShmem_sc->fServo == TRUE)
    {
        for (i = 0; i < AXIS_COUNT; i++)
        {
            SC_Servo(0);  // servo off
        }
    }

    // (2) release EtherCAT Master
    if (g_hMaster != ECAT_NULL)
    {
    	ECAT_ReleaseMaster();
    }


    // (1) timer unregister
#if 0
    if (g_nTimer != -1)
    {
        nRet[0] = TIME_UnregTimerPulse(g_nTimer);
        g_nTimer = -1;
    }

    // (2) detach SC(time) connection
    if (g_coidSC != -1)
    {
        nRet[1] = SC_DetachConnection(SC_TIME_CHANNEL, g_coidSC);
        g_coidSC = -1;
    }
#endif

#if 0
    // (3) kill thread of timer
    if (thread_RcvTimerPulse != NULL)
    {
        nRet[1] = THREAD_Kill(thread_RcvTimerPulse);
    }
#endif

    // (4) destroy SC(time)-Channel
    if (g_chidSCTime != -1)
    {
        SC_DestroyChannel(SC_TIME_CHANNEL, g_chidSCTime);
        g_chidSCTime = -1;
    }

    // (6) destroy RM_SHM
    if (g_pShmem_rm != NULL)
    {
        if (g_fOpenShmRm == TRUE)
        {
            g_pShmem_rm->fInitProcSC = FALSE; // flag of init for RM SHM
            g_pShmem_rm->fExitProcSC = TRUE;  // flag of exit for RM SHM
        }
        
        RM_DestroyShmem();
    }

#if 1
    // (7) destroy TE_SHM
    if (g_pShmem_te != NULL)
    {       
        TE_DestroyShmem();
    }
#endif

    //THREAD_Sleep(1000);

    // check thread exit state
    for (i = 0; i < 30; i++)
    {
        if (g_fThreadRuntime == TRUE &&
            g_fDeviceStateThreadState == TRUE &&
            g_fDisplayThreadState == TRUE)
        {
            break;
        }

        THREAD_Sleep(100);
    }

    if (i > 30)
    {
        // kill run-time thread 
        if (thread_RcvTimerPulse != NULL)
        {
            THREAD_Kill(thread_RcvTimerPulse);
            thread_RcvTimerPulse = NULL;
        }

        if (thread_SlaveState != NULL)
        {
            THREAD_Kill(thread_SlaveState);
            thread_SlaveState = NULL;
        }

        VERBOSE_WARNING("Forced termination of run-time and monitoring thread.\n");        
    }

    // (5) destroy SC_SHM
    if (g_pShmem_sc != NULL)
    {
        SC_DestroyShmem();
    }
    
#if 0
    for (iErrCheck = 0; iErrCheck < 3; iErrCheck++)
    {
        if (nRet[iErrCheck] == -1)
        {
            return -1;
        }

        g_fExit = TRUE;
    }
#endif

    return 0;
}


////////////////////////////////////////////////////////////////////////////////
//
// _loc_ExitConsole()
//
int _loc_ExitConsole(void)
{
    int coid;

    // connect SC channel
    coid = SC_ConnectChannel(SC_CHANNEL_NAME);

    if (coid != -1)
    {
        MSG_SendPulse(coid, SC_SERV_EXIT, 0);
    }

//    THREAD_Sleep(500);

//    SC_DetachConnection(SC_CHANNEL_NAME, coid);

    return EXIT_SUCCESS;
}





////////////////////////////////////////////////////////////////////////////////
//
// DoService()
//
// -pRcv : pointer to receive packet
// -pSend: pointer to send packet
//
int DoService(const SC_MSG* pRcv, SC_MSG* pSend)
{
    int nRet = -1;
//    int i;

    //memcpy(pSend, pRcv, 12 + pRcv->size);
    memcpy(pSend, pRcv, sizeof(SC_MSG));

    switch(pRcv->code)
    {
    case SC_SERV_EXIT:
        g_fLoopGo = FALSE;
        nRet = SC_Exit();
        break;

    case SC_SERV_VERSION:
        nRet = SC_SetVersion(pSend);
        break;

    case SC_SERV_INIT:
        nRet = SC_Init_External();
        break;

    case SC_SERV_SERVO:
        nRet = SC_Servo(pRcv->value);
        break;

    case SC_SERV_GET_ALARM_CODE:
        nRet = SC_GetAlarmCode();        
    	break;

    case SC_SERV_ALARM_RESET:
        nRet = SC_ClearAlarm();
    	break;

    case SC_SERV_MASTER_RELEASE:
        nRet = SC_ReleaseMaster();
    	break;

    case SC_SERV_GET_POSITION:
        nRet = SC_GetPosition();
    	break;

    case SC_SERV_ESTOP:
        nRet = SC_EStop(pRcv->value);
    	break;

    case SC_TEST_IO_ON:
        nRet = SC_EcatDIO(pRcv->value, TRUE);        
    	break;

    case SC_TEST_IO_OFF:
        nRet = SC_EcatDIO(pRcv->value, FALSE);    	
    	break;

    case SC_TEST_NETWORK:
        nRet = SC_GetNetworkState();            
        if (nRet == 0)
        {
            VERBOSE_MESSAGE("Network status is normal.\n");
        }
        else
        {
            VERBOSE_ERROR("Check the network connection status.\n");
        }

    case SC_SERV_ALIVE:           // 127(ignore service)
        break;
        
    default:
        VERBOSE_WARNING("Not defined service code : <%d>\n", pRcv->code);
    }

    return nRet;
}
