#include <stdio.h>
#include <stdlib.h>

#include "servocon.h"
#include "dandy_echo.h"
#include "dandy_msgpass.h"
#include "dandy_thread.h"
#include "CRT.h"

#if defined (__QNXNTO__)
#include "ecatmkpa.h"
#include "libmkpaiodev.h"
//#include "mkpaauxiliary.h"
#endif 

////////////////////////////////////////////////////////////////////////////////
//
// Variables
//

unsigned short g_nReadStatusValue[ROB_AXIS_COUNT];

////////////////////////////////////////////////////////////////////////////////
//
// Functions
//

int SERV_DoService(const SC_MSG* pRcv, SC_MSG* pSend);  // service function



////////////////////////////////////////////////////////////////////////////////
//
// SERV_DoService()
//
// -pRcv : pointer to receive packet
// -pSend: pointer to send packet
//
int SERV_DoService(const SC_MSG* pRcv, SC_MSG* pSend)
{
    int nRet = -1;
//    int i;

    //memcpy(pSend, pRcv, 12 + pRcv->size);
    memcpy(pSend, pRcv, sizeof(SC_MSG));

    switch(pRcv->code)
    {
    case SC_SERV_EXIT:
        g_fLoopGo = FALSE;
        nRet = MAIN_Exit();
        break;

    case SC_SERV_VERSION:
        nRet = SERV_SetVersion(pSend);
        break;

    case SC_SERV_INIT:
        nRet = MAIN_Init_External();
        break;

    case SC_SERV_SERVO:
        nRet = SERV_Servo(pRcv->value);
        break;

    case SC_SERV_GET_ALARM_CODE:
        nRet = SERV_GetAlarmCode();        
    	break;

    case SC_SERV_ALARM_RESET:
        nRet = SERV_ClearAlarm();
    	break;

    case SC_SERV_MASTER_RELEASE:
        nRet = SERV_ReleaseMaster();
    	break;

    case SC_SERV_SET_POSITION:
        nRet = SERV_SetPosition(pRcv->value);
    	break;

    case SC_SERV_GET_POSITION:
        nRet = SERV_GetPosition();
    	break;

    case SC_SERV_ESTOP:
        nRet = SERV_EStop(pRcv->value);
    	break;

    case SC_SERV_SCAN_INPUT:
    	break;

    case SC_SERV_SCAN_OUTPUT:
    	break;

    case SC_SERV_ARCON_OUT:
    	break;

    case SC_SERV_GASON_OUT:
    	break;

    case SC_SERV_INCHING_POS:
    	break;

    case SC_SERV_INCHING_NEG:
    	break;

    case SC_SERV_TOUCH_START:
    	break;

    case SC_SERV_TOUCH_READY:
    	break;

    case SC_SERV_VOLT_OUT:
    	break;

    case SC_SERV_CURR_OUT:
    	break;

    case SC_TEST_IO_ON:
        nRet = SERV_EcatDIO(pRcv->value, TRUE);        
    	break;

    case SC_TEST_IO_OFF:
        nRet = SERV_EcatDIO(pRcv->value, FALSE);    	
    	break;

    case SC_TEST_NETWORK:
        nRet = SERV_GetNetworkState();            
        if (nRet == 0)
        {
            VERBOSE_MESSAGE("Network status is normal.\n");
        }
        else
        {
            VERBOSE_ERROR("Check the network connection status.\n");
        }

    case SC_SERV_ALIVE:           // 127(ignore service)
        break;
        
    default:
        VERBOSE_WARNING("Not defined service code : <%d>\n", pRcv->code);
    }

    return nRet;
}


////////////////////////////////////////////////////////////////////////////////
//
// SC_GetSlaveCountFromNetwork()
//
// -return: slave count in network
//
int SC_GetSlaveCountFromNetwork(void)
{
#if defined (__QNXNTO__)
    int nRet = 0;
    unsigned short SlaveCount = 0;

    nRet = EcatIODevSSGetSlaveCount(g_hMaster, &SlaveCount);

    if (nRet != 0)
    {
        return -1;        
    }

    g_nSlaveCount = SlaveCount;

    return SlaveCount;
#else
    return g_nSlaveCount;
#endif
}


////////////////////////////////////////////////////////////////////////////////
//
// SC_GetSlaveCountFromFile()
//
// -return: slave count in config. file
//
int SC_GetSlaveCountFromFile(void)
{
#if defined (__QNXNTO__)
    int nRet;
    unsigned short SlaveCount = 0;

    nRet = EcatIODevGetSlaveCount(g_hMaster, &SlaveCount);
    
    if (nRet != 0)
    {
        return -1;
    }
    
    g_nSlaveCount = SlaveCount;

    return SlaveCount;
#else
    return g_nSlaveCount;
#endif
}


////////////////////////////////////////////////////////////////////////////////
//
// SERV_GetNetworkState()
//
int SERV_GetNetworkState(void)
{
    int nSlaveCntNetwork = 0;
    int nSlaveCntFile = 0;

    // get slave count in network
    nSlaveCntNetwork = SC_GetSlaveCountFromNetwork();
    //VERBOSE_MESSAGE("network slave: %d\n", nSlaveCntNetwork);
    

    // get slave count in config. file
    nSlaveCntFile = SC_GetSlaveCountFromFile();
    //VERBOSE_MESSAGE("file slave : %d\n", nSlaveCntFile);

    if (nSlaveCntNetwork != nSlaveCntFile || nSlaveCntNetwork <= 0 || nSlaveCntFile <= 0)
    {   
        return -1;
    }
    else
    {
        return 0;
    }
    
}


////////////////////////////////////////////////////////////////////////////////
//
// SC_GetDeviceState()
//
int SERV_GetServoState(void)
{
    int iAxis, i;
    int nRet;
    int nState[8];
    int mask;    
    

    for (iAxis = 0; iAxis < g_nAxisCount; iAxis++)
    {
        mask = 0x0001;

        // read status word
        nRet = ECAT_ReadStatus(iAxis, &g_nReadStatusValue[iAxis]);

        if (nRet != 0)
        {
            return -1;
        }
                
        for (i = 0; i < 8; i++)
        {
            nState[i] = g_nReadStatusValue[iAxis] & mask;
            mask = mask << 1;
#if 0   //tmp for test
            VERBOSE_VERBOSE("[Axis %d] State Value: %d, nState: %d[%d]\n",
                            iAxis, g_nReadStatusValue[iAxis], nState[i], i);
#endif
        }

        // (1) check fault state (bit 3: xxxx1xxx)        
        if (nState[3] == 0x08)
        {
            g_nError[iAxis] = -1;
            if (g_pShmem_sc != NULL)
            {
                g_pShmem_sc->sysstate.fErrorState = TRUE;
            }
        }
        else
        {
            g_nError[iAxis] = 0;
            if (g_pShmem_sc != NULL)
            {
                g_pShmem_sc->sysstate.fErrorState = FALSE;
            }
        }

        // (2) servo state (bit 2: xx110111)
        if (nState[0] == 0x01 && nState[1] == 0x02 && nState[2] == 0x04 &&
            nState[3] == 0x00 && nState[4] == 0x16)
        {            
            g_nServo[iAxis] = 1;
            if (g_pShmem_sc != NULL)
            {
                g_pShmem_sc->outputstate.fServoOnOutState = TRUE;
            }
        }
        else
        {
            g_nServo[iAxis] = 0;
            if (g_pShmem_sc != NULL)
            {
                g_pShmem_sc->outputstate.fServoOnOutState = FALSE;
            }
        }
#if 0   //tmp for test
            VERBOSE_VERBOSE("[Axis %d] State Value: %d\n",
                            iAxis, g_nReadStatusValue[iAxis]);
#endif
    }

    return RESULT_OK;
}



////////////////////////////////////////////////////////////////////////////////
//
// SERV_ReleaseMaster()
//
int SERV_ReleaseMaster(void)
{
    ECAT_ReleaseMaster();

    return 0;
}


////////////////////////////////////////////////////////////////////////////////
//
// SERV_EStop()
//
// -nValue: value of receive packet (0: off, 1: on)
//
int SERV_EStop(int nValue)
{
    if (nValue == 0)  // no e-stop
    {
        g_pShmem_sc->sysstate.fEStopState = FALSE;
    }
    else if (nValue == 1)  // set e-stop
    {
        g_pShmem_sc->sysstate.fEStopState = TRUE;
    }

    return 0;
}


////////////////////////////////////////////////////////////////////////////////
//
// SERV_GetPosition()
//
int SERV_GetPosition(void)
{
#if defined (__QNXNTO__)
	int nRet = 0;
    int i;

    for (i = 0; i < g_nAxisCount; i++)
    {
        // get actual pos.
        nRet = ECAT_ReadPosition(i, &g_dbAct_Pos[i]);   

        //VERBOSE_VERBOSE("Axis[%d]: %d\n", i, g_dbAct_Pos[i]);

        if (nRet != 0)
        {
            VERBOSE_ERROR("Cannot get %d axis position\n", i);
        }

        // write actual pos. to SC_SHM
        if (g_pShmem_sc != NULL)
        {
            g_pShmem_sc->inputstate.dbActPos[i] = g_dbAct_Pos[i];
            g_dbTrg_Pos[i] = g_pShmem_sc->inputstate.dbTrgPos[i] = g_dbAct_Pos[i];
        }
    }

    return nRet;

#else
    int i;

    for (i = 0; i < g_nAxisCount; i++)
    {
        if (g_pShmem_sc != NULL)
        {
            g_pShmem_sc->inputstate.dbActPos[i] = g_dbTrg_Pos[i];
        }
    }
    
    return 0;

#endif

}

////////////////////////////////////////////////////////////////////////////////
//
// SERV_SetVersion()
//
// -pMsg: message packet data
// 
int SERV_SetVersion(SC_MSG* pMsg)
{
    CRT_strcpy(pMsg->data.vers.sc_build,
               sizeof(pMsg->data.vers.sc_build), 
               SC_BUILD);

    CRT_strcpy(pMsg->data.vers.sc_vers,
               sizeof(pMsg->data.vers.sc_vers),
               SC_VERSION);            
        
    pMsg->size = sizeof(pMsg->data.vers);

    return 0;
}


////////////////////////////////////////////////////////////////////////////////
//
// SERV_GetAlarmCode()
//
int SERV_GetAlarmCode(void)
{
    int nRet;
	int i;

    if (g_pShmem_sc->sysstate.fEcatInitState == FALSE)
    {
    	return -1;
    }

    for (i = 0; i < g_nAxisCount; i++)
    {
        nRet = ECAT_GetAlarmCode(i, (ECAT_WORD*) &g_nErrCode[i]);
        
        VERBOSE_VERBOSE("%d axis alarm code : %x\n", i, g_nErrCode[i]);
    }

    return 0;
}


////////////////////////////////////////////////////////////////////////////////
//
// SERV_EcatDIO()
//
// -nIndex: index of IO device
// -nValue: TRUE(on)/FALSE(off)
//
int SERV_EcatDIO(int nIndex, BOOL bValue)
{
#if defined (__QNXNTO__)
	int nRet;

    if (bValue == TRUE)
    {
        nRet = ECAT_WriteIO(nIndex, TRUE);
    }
    else
    {
        nRet = ECAT_WriteIO(nIndex, FALSE);
    }
    
    return nRet;
#else
    if (bValue == TRUE)
    {
        VERBOSE_VERBOSE("%d IO is ON\n", nIndex);
    }
    else
    {
        VERBOSE_VERBOSE("%d IO is OFF\n", nIndex);        
    }

    return 0;
#endif    
}



////////////////////////////////////////////////////////////////////////////////
//
// SERV_Servo()
//
// -nValue: value of receive packet (0: off, 1: on)
//
int SERV_Servo(int nValue)
{
    int nRet = 0;
    int i;

#if 0
    // check TE state
    if (g_pShmem_te != NULL)
    {
        if (g_pShmem_te->run_mode != RUNMODE_NONE)
        {
        	VERBOSE_WARNING("TE process is run-mode.\n");
        	return 0;
        }
    }

#endif

	// check master instance state
	if (g_hMaster == NULL)
	{
		VERBOSE_WARNING("Not ready to use Master.\n");
		return -1;
	}

    // check ethercat state
    if (g_pShmem_sc->sysstate.fEcatInitState == FALSE)
    {
        VERBOSE_ERROR("Check the ethercat network\n");
    	return -1;
    }

    
    // check alarm code
    if (g_pShmem_sc->sysstate.fErrorState == TRUE)
    {
        VERBOSE_WARNING("Cannot servo on/off. Check alarm code.\n");
        return -1;
    }


    if (nValue == 0)  // servo off
    {
        for (i = 0; i < g_nAxisCount; i++)
        {
            nRet = ECAT_ServoOff(i);
            THREAD_Sleep(100);
        }

        VERBOSE_MESSAGE("Servo off.\n");        
    }
    else if (nValue == 1)  // servo on
    {
        for (i = 0; i < g_nAxisCount; i++)
        {
            nRet = ECAT_ServoOn(i);            
            THREAD_Sleep(100);
        }

        VERBOSE_MESSAGE("Servo on.\n");        
    }    

    return nRet;
}


////////////////////////////////////////////////////////////////////////////////
//
// SERV_SetPosition()
//
// -nValue: value of position (pulse)
//
int SERV_SetPosition(int nValue)
{
    int nRet = 0;
    g_fSetPosFuncActive = TRUE;
    THREAD_Sleep(100);

#if defined (__QNXNTO__)
    int iAxis;

    for (iAxis = 0; iAxis < g_nAxisCount; iAxis++)
    {
        nRet = ECAT_WritePosition(iAxis, nValue);
    }

#endif
    
    THREAD_Sleep(100);
    g_fSetPosFuncActive = FALSE;

    return nRet;
}



////////////////////////////////////////////////////////////////////////////////
//
// SERV_ClearAlarm()
//
int SERV_ClearAlarm(void)
{
    int nRet;
    int i;    

    for (i = 0; i < g_nAxisCount; i++)
    {
        nRet = ECAT_AlarmClear(i);    
    }

    if (g_pShmem_sc != NULL)
    {
        g_pShmem_sc->sysstate.fErrorState = FALSE;
        VERBOSE_MESSAGE("Cleared servo alarm.\n");       
    }
    
    return 0;
}





////////////////////////////////////////////////////////////////////////////////
//
// SERV_SetVerbose()
//
void SERV_SetVerbose(void)
{
    switch(g_chPrintLev)
    {    
    case 'm':
        // -message argument
        VERBOSE_EnableOutput(VERBOSE_TYPE_VERBOSE, FALSE);
        VERBOSE_EnableOutput(VERBOSE_TYPE_MESSAGE, TRUE);
        VERBOSE_EnableOutput(VERBOSE_TYPE_ERROR,   TRUE);
        VERBOSE_EnableOutput(VERBOSE_TYPE_WARNING, TRUE);
        VERBOSE_EnableOutput(VERBOSE_TYPE_ALERT,   TRUE);
        VERBOSE_EnableOutput(VERBOSE_TYPE_NOTIFY,  TRUE);
        break; 

    case 'w':
        // -warning argument
        VERBOSE_EnableOutput(VERBOSE_TYPE_VERBOSE, FALSE);
        VERBOSE_EnableOutput(VERBOSE_TYPE_MESSAGE, FALSE);
        VERBOSE_EnableOutput(VERBOSE_TYPE_ERROR,   TRUE);
        VERBOSE_EnableOutput(VERBOSE_TYPE_WARNING, TRUE);
        VERBOSE_EnableOutput(VERBOSE_TYPE_ALERT,   TRUE);
        VERBOSE_EnableOutput(VERBOSE_TYPE_NOTIFY,  TRUE);
        break; 

    case 'e':
        // -error argument
        VERBOSE_EnableOutput(VERBOSE_TYPE_VERBOSE, FALSE);
        VERBOSE_EnableOutput(VERBOSE_TYPE_MESSAGE, FALSE);
        VERBOSE_EnableOutput(VERBOSE_TYPE_ERROR,   TRUE);
        VERBOSE_EnableOutput(VERBOSE_TYPE_WARNING, FALSE);
        VERBOSE_EnableOutput(VERBOSE_TYPE_ALERT,   TRUE);
        VERBOSE_EnableOutput(VERBOSE_TYPE_NOTIFY,  TRUE);
        break; 

    case 'v':        
        // -verbose argument
        VERBOSE_EnableOutput(VERBOSE_TYPE_VERBOSE, TRUE);
        VERBOSE_EnableOutput(VERBOSE_TYPE_MESSAGE, TRUE);
        VERBOSE_EnableOutput(VERBOSE_TYPE_ERROR,   TRUE);
        VERBOSE_EnableOutput(VERBOSE_TYPE_WARNING, TRUE);
        VERBOSE_EnableOutput(VERBOSE_TYPE_ALERT,   TRUE);
        VERBOSE_EnableOutput(VERBOSE_TYPE_NOTIFY,  TRUE);        
        break; 

    default:        
        // -verbose argument
        VERBOSE_EnableOutput(VERBOSE_TYPE_VERBOSE, TRUE);
        VERBOSE_EnableOutput(VERBOSE_TYPE_MESSAGE, TRUE);
        VERBOSE_EnableOutput(VERBOSE_TYPE_ERROR,   TRUE);
        VERBOSE_EnableOutput(VERBOSE_TYPE_WARNING, TRUE);
        VERBOSE_EnableOutput(VERBOSE_TYPE_ALERT,   TRUE);
        VERBOSE_EnableOutput(VERBOSE_TYPE_NOTIFY,  TRUE);        
        break; 
    }

    // set vervose color
    VERBOSE_SetColor(VERBOSE_TYPE_VERBOSE, 
                     ECHO_COLOR_WHITE, 
                     ECHO_COLOR_BLACK);

}

